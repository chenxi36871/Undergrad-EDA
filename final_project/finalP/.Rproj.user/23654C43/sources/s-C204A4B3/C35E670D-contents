#chapter 1 data 抽样例子lincoln's address
#scan()中，what给出要读取的数据的类型logical, integer, numeric, complex, character, raw以及list.
#          sep参数是用于指出文件中数据的分隔符
report.dat<-scan("D:/学习/大三上/探索性数据分析/Lincoln.address.txt",what="",sep="")
report.dat<-unlist(strsplit(report.dat,split="-")) #strsplit()中的split参数表示按什么进行划分，如果等于""，就会按照一个字母一个字母的分。strsplit出来的是list，所以要unlist

word.len<-sapply(1:length(report.dat), function(j){ #遍历report.dat中的每个词
  tmp<-unlist(strsplit(report.dat[j],split = "")) #将每个词拆分成字母
  tmp<-tmp[!tmp %in% c(",",".","-")] #去除标点符号的影响
  #print(tmp)
  return(length(tmp))
})
print(mean(word.len))

#Chapter 2 
library(lattice)
library(mice)
library(VIM)
library(ggplot2)
library(mvtnorm)
library(DMwR)
#缺失值的处理
#a.产生完成随机缺失的X，30%缺失
xy.dat<-rmvnorm(100,mean=c(0,0),sigma=matrix(c(1,0.5,0.5,10),nrow=2,ncol=2))
xy.dat<-data.frame(xy.dat)
colnames(xy.dat)<-c("x","y")
head(xy.dat)
#indicator=1 means missing, and 0 otherwise
miss.id.mcar<-sample(x=seq(1,100),size=30)
xy.dat$miss.ind.mcar<-ifelse(seq(1,100) %in% miss.id.mcar,1,0)
xy.dat$x.mcar<-ifelse(xy.dat$miss.ind.mcar==1,NA,xy.dat$x)
#b.生成随机缺失的x
#可以构建一个缺失机制模型：logit P(x is missing)= theta0 +theta1 * y
theta0<-log(0.3/0.7)
theta1<-0.3
miss.mar.prob<-exp(theta0+theta1*xy.dat$y)/(1+exp(theta0+theta1*xy.dat$y))
xy.dat$miss.ind.mcar<-rbinom(100,size = 1,prob=miss.mar.prob)
xy.dat$x.mar<-ifelse(xy.dat$miss.ind.mcar==1,NA,xy.dat$x)
#c.产生非随机缺失的x
#考虑如下缺失机制模型：logit P(x is missing)= theta0 + theta1 *1
miss.mnar.prob<-exp(theta0 + theta1 *xy.dat$x)/(1+exp(theta0 + theta1 *xy.dat$x))
xy.dat$miss.ind.mcar<-rbinom(100,size = 1,prob = miss.mnar.prob)
xy.dat$x.mnar<-ifelse(xy.dat$miss.ind.mcar==1,NA,xy.dat$x)

#练习1：a.任意给出一个3*2的数据阵A，其中1行2列和2行1列位置的数缺失。
#       b.令B为数据A中的完全数据，输出B
A<-matrix(c(1,NA,3,NA,2,4),nrow = 3)
print(A)
complete.cases(A)
B<-A[complete.cases(A),]
B

#探索缺失值模式
data("airquality")
dim(airquality)
head(airquality)
any(is.na(airquality))
md.pattern(airquality)
aggr(airquality,prop=FALSE,numbers=TRUE)

#缺失值的删除与填补
#a.个案剔除法（直接删除有缺失值的行，可能会导致删除的过多）
aircomp<-airquality[complete.cases(airquality),]
dim(aircomp)
#b.简单插补（均值插补为例）
mean6<-apply(airquality,2,mean,na.rm=TRUE)
mean6
air_meanimput<-airquality
air_meanimput$col<-c("mean_imputation","notNA")[complete.cases(airquality[,1:2])+1]
head(air_meanimput)
air_meanimput[is.na(air_meanimput$Ozone),"Ozone"]<-mean6["Ozone"]
air_meanimput[is.na(air_meanimput$Solar.R),"Solar.R"]<-mean6["Solar.R"]
ggplot(air_meanimput,aes(Ozone,fill=col))+geom_histogram(binwidth = 3,alpha=0.5,position="identity")
ggplot(air_meanimput,aes(Solar.R,fill=col))+geom_histogram(binwidth = 3,alpha=0.5,position = "identity")
#思考为什么图像显示插补了很多不同的值？按理说应该插补的都是平均值mean。因为只要Ozone和Solar.R中有一个缺失，就自动标识是插入值，其实有的并不是
#输出Ozone没有缺失，Solar.R缺失的行的ID
id<-which(!is.na(airquality$Ozone)& is.na(airquality$Solar.R))
airquality[id,]
air_meanimput[id,] #发现这些行里Ozone没有缺失，但是也填补了值
#调整col的取值
air_meanimput<-airquality
air_meanimput$col<-c("mean_imputation","notNA")[complete.cases(airquality[,1:2])+1]
air_meanimput$col.Ozone<-c("mean_imputation","notNA")[complete.cases(airquality[,"Ozone"])+1]
air_meanimput$col.Solar.R<-c("mean_imputation","notNA")[complete.cases(airquality[,"Solar.R"])+1]
head(air_meanimput)
air_meanimput[is.na(air_meanimput$Ozone),"Ozone"]<-mean6["Ozone"]
air_meanimput[is.na(air_meanimput$Solar.R),"Solar.R"]<-mean6["Solar.R"]
ggplot(air_meanimput,aes(Ozone,fill=col.Ozone))+geom_histogram(binwidth = 3,alpha=0.5,position = "identity")
ggplot(air_meanimput,aes(Solar.R,fill=col.Solar.R))+geom_histogram(binwidth = 3,alpha=0.5,position = "identity")
#Solar VS Ozone
ggplot(air_meanimput,aes(x=Solar.R,y=Ozone,colour=col))+geom_point(size=2)

#c.回归插补
air_regimput<-airquality
air_regimput$col<-c("reg_imputation","notNA")[as.vector(!is.na(airquality[,"Ozone"]))+1]
fit<-lm(Ozone~Temp,data=air_regimput)
pred<-predict(fit,newdata=air_regimput[is.na(air_regimput$Ozone),])
a<-which(is.na(air_regimput$Ozone)) #输出有缺失的行ID
air_regimput$Ozone[a]<-as.vector(pred)
ggplot(air_regimput,aes(Ozone,fill=col))+geom_histogram(binwidth = 3,position="identity") #插补效果
ggplot(air_regimput,aes(x=Temp,y=Ozone,color=col))+geom_point(size=2) #可以看出插补的值都在一条回归直线上

#d.KNN插补
air_KNN<-knnImputation(airquality,k=10,meth = "weighAvg") #weights:exp(-dist(k,x))
#表示离缺失值近的占得比重大
air_KNN$col=c("knn_imputation","notNA")[complete.cases(airquality[,1:2])+1] #这一步和插补没关系，是用来判断哪些是插补进去的从而便于后续画图的
ggplot(air_KNN,aes(Ozone,fill=col))+geom_histogram(alpha=0.5,position="identity")
ggplot(air_KNN,aes(Solar.R,Ozone,color=col))+geom_point(size=2)

#e.多重插补
#5重插补，即生成5个无缺失数据集
imp<-mice(airquality,m=5,seed=1,print=F)
summary(imp)
imp$imp$Ozone #每个插补数据集缺失值位置的数据补齐具体数值
comp.dat2<-complete(imp,action=2) #或者可以查看某个补齐的数据集
head(comp.dat2)
#插补拟合的矩阵，现在可以看出是除了缺失值本身其余所有变量都参与了拟合
predM<-imp$predictorMatrix
#可以通过修改该矩阵，来选择用什么变量参与拟合缺失值
predM[,c("Ozone")]<-0
meth<-imp$method #查看插补方法
meth
#跳过某个变量，不对其进行插补，则
meth[c("Solar.R")]<-""
#对插补后的完整数据建立回归模型
fit<-with(imp,lm(Ozone~Wind+Temp+Solar.R))
pooled<-pool(fit)
pooled

#验证Rubin's Rule
mimp<-5
Q<-NULL
U<-NULL
for(j in 1:mimp){
  Q <- rbind(Q, as.numeric(fit$analyses[[j]]$coefficients))
  U <- rbind(U, as.numeric(diag(vcov(fit$analyses[[j]]))))
}
Qbar <- apply(Q, 2, mean)
Ubar <- apply(U, 2, mean)
B <- (1/(mimp-1))*rowSums(sapply(1:nrow(Q), function(k){(Q[k,]-Qbar)^2}))
T <- Ubar + (1+1/mimp)*B
df.v <- (mimp - 1)*((1+Ubar/((1+1/mimp)*B))^2)
df.com <- unique(pooled$pooled$dfcom)
df.obs <- df.com*(df.com+1)*(Ubar/T)/(df.com+3)
df.mi <- 1/(1/df.v + 1/df.obs)

#多重插补的效果
air_mulimput<-complete(imp,action = 1) #action的设置（自查）
air_mulimput$col<-c("multip_imputation","notNA")[complete.cases(airquality[,1:2])+1]
ggplot(air_mulimput,aes(Ozone,fill=col))+geom_histogram(alpha=0.5,position="identity")
ggplot(air_mulimput,aes(Solar.R,Ozone,color=col))+geom_point(size=2)

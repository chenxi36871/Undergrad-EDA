cereal<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
View(cereal)
###数据预处理
#缺失值
dim(cereal)
###数据预处理
#缺失值
head(cereal)
md.pattern(cereal)
library(mice)
md.pattern(cereal)
?md.pattern()
md.pattern(cereal,rotate.names = FALSE)
md.pattern(cereal,rotate.names = FALSE)
md.pattern(cereal,rotate.names = TRUE)
library(VIM)
aggr(cereal)
cereal<-cereal[complete.cases(cereal),]
cereal<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cerealorgin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorgin[complete.cases(cereal),]
cereal<-cerealorgin[complete.cases(cerealorgin),]
#异常值
# the definition of testing outlier function
outlier.distest <- function(data = data, r = 5, p = 0.1){
out <- data.frame(x=numeric(0),y=numeric(0))
for(i in 1:nrow(data)){
count <- 0
for(j in 1:nrow(data)){
distance <- sqrt(sum((data[i,] - data[j,])^2))
if((i != j) & (distance <= r)){
count <- count + 1
if( count >= (p * nrow(data)) ){
break
}
}
}
if(count < p*nrow(data)){
out <- rbind(out,dat[i,])
}
}
return(out)
}
m <- outlier.distest(cereal,r=4)
m <- outlier.distest(cereal$calories,r=4)
#异常值
# the definition of testing outlier function
ggplot() + geom_point(data = cereal$calories,aes(x,y))
library(ggplot)
library(ggplot2)
#异常值
# the definition of testing outlier function
ggplot() + geom_point(data = cereal$calories,aes(x,y))
#异常值
# the definition of testing outlier function
ggplot(cereal) + geom_boxplot()
#异常值
# the definition of testing outlier function
ggplot(cereal) + geom_boxplot(y=calories)
#异常值
# the definition of testing outlier function
ggplot(cereal) + geom_boxplot(y=cereal$calories)
#异常值
# the definition of testing outlier function
ggplot(cereal) + geom_boxplot(aes(x=factor(1),y=cereal$calories))
ggplot(cereal) + geom_boxplot(aes(x=factor(1),y=cereal$protein))
ggplot(cereal) + geom_boxplot(aes(x=factor(1),y=fat))
View(cereal)
library(corrplot)
cereall<-cereal[,c(-1,-2,-3,-12,-13,-15)]
###可视化
score.corr <- round(cor(cereall), 3)
corrplot(score.corr, addCoef.col = 'grey')
r
corrplot(score.corr, addCoef.col = 'grey')
###主成分
score.pca <- prcomp(cereal[,-1], scale=T, retx=T)
###主成分
score.pca <- prcomp(cereal[,-(1:2)], scale=T, retx=T)
###主成分
score.pca <- prcomp(cereal[,-(1:3)], scale=T, retx=T)
summary(score.pca)
###主成分
score.pca <- prcomp(cereal[,-(1:3)], scale=T)
summary(score.pca)
###主成分
score.pca <- prcomp(cereal[,-(1:3)], scale=T, retx=T)
score.pca$rotation
###主成分
score.pca <- prcomp(cereal[,-c(1:3,13:15)], scale=T, retx=T)
summary(score.pca)
?prcomp
score.pca
#主成分得分
pc <- predict(score.pca)
pc
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
box()
View(pc)
cerealorgin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorgin[complete.cases(cerealorgin),]
cereall<-cereal[,c(-1,-2,-3,-12,-13,-15)]
###主成分
score.pca <- prcomp(cereal[,-c(1:3,13:15)], scale=T, retx=T)
summary(score.pca)
score.pca$rotation
score.pca
#主成分得分
cerealpca<- predict(score.pca)
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
#kmeans聚类
set.seed(1234)
cerealkmeans <- kmeans(cerealpca,centers = 3)
#查看中心点
kmeans.result$centers
#查看中心点
cerealkmeans$centers
kmeans.result$cluster
cerealkmeans$cluster
table(cerealkmeans$cluster)
plot(cerealpca,col=cerealkmeans$cluster,pch="*")
points(cerealkmeans$centers[,1:2],pch=8,col=1:3,cex=2)
points(cerealkmeans[outlier,1:2],col=4,pch="X")
plot(cerealpca)
plot(cerealpca,pch=".")
plot(cerealpca,pch="+")
cerealkmeans <- kmeans(cerealpca,centers = 4)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
cerealkmeans$centers
#对不同品牌的麦片进行聚类？
cerealpca1<-cbind(cereal[,c(1:3,13:15)],cerealpca)
View(cerealpca1)
###主成分
score.pca <- prcomp(cereal[,-c(1:3,13)], scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
cerealkmeans <- kmeans(cerealpca,centers = 2)
#对不同品牌的麦片进行聚类？
cerealpca1<-cbind(cereal[,c(1:3,13:15)],cerealpca)
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
#对不同品牌的麦片进行聚类？
cerealpca1<-cbind(cereal[,c(1:3,13)],cerealpca)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 3)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 4)
table(cerealkmeans$cluster)
plot(cerealpca,pch="+")
plot(cerealpca,col=cerealkmeans$cluster,pch="*")
cereall<-cereal[,c(-1,-2,-3,-13)]
?lofactor()
#异常值
# the definition of testing outlier function
library(DMwR)
?lofactor
LOF <- lofactor(cereall,k=5)
outlier.LOF <- order(LOF,decreasing = T)[1:3]
LOF[outlier.LOF]
outlier.LOF
cerealfinal<-cereal[-c(outlier.LOF),]
cereal<-cereal[-c(outlier.LOF),]
###主成分
score.pca <- prcomp(cereal[,-c(1:3,13)], scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
#kmeans聚类
set.seed(1234)
cerealkmeans <- kmeans(cerealpca,centers = 4)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 3)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 5)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 6)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
plot(cerealpca,pch="+")
plot(cerealpca,col=cerealkmeans$cluster,pch="*")
cerealorgin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorgin[complete.cases(cerealorgin),]
cereall<-cereal[,c(-1,-2,-3,-13)]
outlier.distest <- function(data = data, r = 5, p = 0.1){
out <- data.frame(x=numeric(0),y=numeric(0))
for(i in 1:nrow(data)){
count <- 0
for(j in 1:nrow(data)){
distance <- sqrt(sum((data[i,] - data[j,])^2))
if((i != j) & (distance <= r)){
count <- count + 1
if( count >= (p * nrow(data)) ){
break
}
}
}
if(count < p*nrow(data)){
out <- rbind(out,dat[i,])
}
}
return(out)
}
outlier.distest(cereall,r=3)
cerealorgin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorgin[complete.cases(cerealorgin),]
cereall<-cereal[,c(-1,-2,-3,-13)]
set.seed(1234)
kmeans.result <- kmeans(cereall,centers = 2)
distance <- sqrt(rowSums((cereall-centers)^2))
centers <- kmeans.result$centers[kmeans.result$cluster,]
distance <- sqrt(rowSums((cereall-centers)^2))
outlier <- order(distance,decreasing = T)[1:3]
print(cereall[outlier,])
cereall<-cereall[-outlier,]
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
#kmeans聚类
set.seed(1234)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
plot(cerealpca,pch="+")
plot(cerealpca,col=cerealkmeans$cluster,pch="*")
points(cerealkmeans$centers[,1:2],pch=8,col=1:3,cex=2)
cerealorgin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
md.pattern(cereal,rotate.names = TRUE)
library(ggplot2)
library(mice)
library(corrplot)
md.pattern(cereal,rotate.names = TRUE)
###数据预处理
#缺失值
head(cerealorigin)
md.pattern(cerealorgin,rotate.names = TRUE)
md.pattern(cerealorgin,rotate.names = TRUE)
###数据预处理
#缺失值
head(cerealorigin)
cerealorigin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorgin[complete.cases(cerealorgin),]
cereall<-cereal[,c(-1,-2,-3,-13)]
###可视化
score.corr <- round(cor(cereall), 3)
cereall<-cereal[,c(-1,-2,-3,-13)]
cereal<-cerealorgin[complete.cases(cerealorgin),]
cereal<-cerealorigin[complete.cases(cerealorgin),]
cereal<-cerealorigin[complete.cases(cerealorigin),]
cereall<-cereal[,c(-1,-2,-3,-13)]
###可视化
score.corr <- round(cor(cereall), 3)
corrplot(score.corr, addCoef.col = 'grey')
md.pattern(cerealorigin,rotate.names = TRUE)
#异常值
boxplot(cereall$calories)
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar(alpha=0.8)+coord_polar(theta="y")
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_color_brewer(palette="Dark2")
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#6495ED","#FFA500","#FF4500","#228B22"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#6495ED","#FFA500","#FF4500","#228B22","#CC99FF","#6666FF","#FF33CC"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#6495ED","#FFA500","#FF4500","#33CCCC","#CC99FF","#6666FF","#FF33CC"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#666FF","#0033CC","#0099CC","#660099","#000066"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.8))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.7))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.5))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.6))
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.65))
ggplot(cereal,aes(x=calories))+geom_histogram(aes(y=..density..))+geom_density(colour=blue)
ggplot(cereal,aes(x=calories))+geom_histogram(aes(y=..density..))+geom_density(colour=blues9)
ggplot(cereal,aes(x=calories))+geom_histogram()+geom_density(colour=blues9)
ggplot(cereal,aes(x=calories))+geom_histogram()
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
###聚类
#kmeans聚类
set.seed(1234)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
cerealkmeans$centers
plot(cerealpca,pch="+")
plot(cerealpca,col=cerealkmeans$cluster,pch="*")
points(cerealkmeans$centers[,1:2],pch=8,col=1:3,cex=2)
cerealkmeans <- kmeans(cerealpca,centers = 3)
table(cerealkmeans$cluster)
cerealkmeans <- kmeans(cerealpca,centers = 4)
table(cerealkmeans$cluster)
ggplot(cereal,aes(x=sugar))+geom_histogram()
ggplot(cereal,aes(x=sugars))+geom_histogram()
summary(cereal$sugars)
summary(cereal$potass)
ggplot(cereal,aes(x=potass))+geom_histogram()
library(mice)
cerealorigin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorigin[complete.cases(cerealorigin),]
cereall<-cereal[,c(-1,-2,-3,-13)]
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
cereall<-cereal[,c(-1,-2,-3,-13,-14,-15)]
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
#碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
cerealorigin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
###数据预处理
#缺失值
head(cerealorigin)
md.pattern(cerealorigin,rotate.names = TRUE)
cereal<-cerealorigin[complete.cases(cerealorigin),]
cereall<-cereal[,c(-1,-2,-3,-13,-14,-15)]
#异常值
boxplot(cereall$calories)
###可视化
score.corr <- round(cor(cereall), 3)
corrplot(score.corr, addCoef.col = 'grey')
ggplot(cereal,aes(x=factor(1),fill=mfr))+geom_bar()+coord_polar(theta="y")+scale_fill_manual(values=alpha(c("#99CCFF","#9999FF","#6666FF","#0033CC","#0099CC","#660099","#000066"), 0.65))
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
library(ggplot2)
library(corrplot)
cerealorigin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
###数据预处理
#缺失值
head(cerealorigin)
md.pattern(cerealorigin,rotate.names = TRUE)
cereal<-cerealorigin[complete.cases(cerealorigin),]
cereall<-cereal[,c(-1,-2,-3,-13,-14,-15)]
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
summary(score.pca)
score.pca$rotation
score.pca
#主成分得分
cerealpca<- predict(score.pca)
cerealpca
#碎石图
plot(score.pca,type="lines",main="")
View(cereall)
abline(h=1,col='red')
###聚类
#kmeans聚类
set.seed(1234)
cerealkmeans <- kmeans(cerealpca,centers = 2)
table(cerealkmeans$cluster)
cerealkmeans$centers
#install.packages("factoextra", dependencies = T)
library(dplyr)
library(factoextra) # clustering algorithms & visualization
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
#install.packages("broom", dependencies = T)
library(broom)
###聚类
set.seed(1234)
## Compute the gap statistic
gap_stat = clusGap(cerealpca, FUN = kmeans, nstart = 25, K.max = 10, B = 500)
# Plot the result
fviz_gap_stat(gap_stat)
####
library(sjPlot)
install.library(sjPlot)
install.packages(sjPlot)
install.packages("sjPlot")
sjc.elbow(cerealpca, steps = 15, show.diff = FALSE)
####
library(sjPlot)
sjc.elbow(cerealpca, steps = 15, show.diff = FALSE)
sjc.elbow(cerealpca, steps = 15, show.diff = FALSE)
####
library(sjPlot)
sjc.elbow(cerealpca, steps = 15, show.diff = FALSE)
cerealorigin<-read.csv("D://学习//大三上//探索性数据分析//hw3//cereals.csv",header=T)
cereal<-cerealorigin[complete.cases(cerealorigin),]
cereall<-cereal[,c(-1,-2,-3,-13,-14,-15)]
###主成分
score.pca <- prcomp(cereall, scale=T, retx=T)
#主成分得分
cerealpca<- predict(score.pca)
#碎石图
plot(score.pca,type="lines",main="")
#碎石图
plot(cerealpca,type="lines",main="")
#碎石图
plot(score.pca,type="lines",main="")
path<-"D://学习//大三上//探索性数据分析//hw3"
cereal = read.csv(path,
stringsAsFactors = F)
path<-"D://学习//大三上//探索性数据分析//hw3//cereals.csv"
cereal = read.csv(path,
stringsAsFactors = F)
library(corrplot)
library(mice)
cereal <- cereal[complete.cases(cereal),]
score.corr <- round(cor(cereal[,-c(1,2,3)]), 3)
corrplot(round(cor(cereal[,-c(1,2,3,13:15)]), 3),addCoef.col = 'grey')
round(cor(cereal[,-c(1,2,3,13:15)]), 3)
score.pca <- prcomp(cereal[,-c(1,2,3,13:15)], scale=T, retx=T)
# 主成分得分
pc <- predict(score.pca)
#查看主成分分析所贡献的方差的碎石图
plot(score.pca,type="lines",main="")
abline(h=1,col='red')
#install.packages("factoextra", dependencies = T)
library(dplyr)
library(factoextra) # clustering algorithms & visualization
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
#install.packages("broom", dependencies = T)
library(broom)
df<-score.pca$x[,1:3]
names(df[,1])="pc1"
names(df[,2])="pc2"
names(df[,3])="pc3"
df<-as.data.frame(df)
names(df)[names(df)=="V1"]="name"
head(df)
distance <- get_dist(df)
fviz_dist(distance,
gradient = list(low = "#00AFBB",
mid = "white",
high = "#FC4E07"))
k2 <- kmeans(df, centers = 2, nstart = 25)
str(k2)
fviz_cluster(k2, data = df)
df %>%
as_tibble() %>%
mutate(cluster = k2$cluster,
state = row.names(cereal)) %>%
ggplot(aes(UrbanPop, Murder, color = factor(cluster), label = state)) +
geom_text()
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
